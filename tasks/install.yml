---
- name: Installing Vault dependencies via yum
  ansible.builtin.yum:
    name:
      - unzip
      - curl
    state: present
    update_cache: true
  when: ansible_pkg_mgr == 'yum'

- name: Installing Vault dependencies via apt
  ansible.builtin.apt:
    name:
      - unzip
      - curl
    state: present
    update_cache: true
  when: ansible_pkg_mgr == 'apt'

- name: Creating Vault group
  ansible.builtin.group:
    name: '{{ vault_group }}'
    system: true
  when: vault_create_account

- name: Creating Vault user
  ansible.builtin.user:
    name: '{{ vault_user }}'
    home: '{{ vault_home_directory }}'
    group: '{{ vault_group }}'
    shell: /sbin/nologin
    system: true
  when: vault_create_account

- name: Creating Vault directories
  file:
    state: directory
    path: '{{ item }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0750'
  with_items:
    - '{{ vault_home_directory }}'
    - '{{ vault_data_directory }}'
    - '{{ vault_install_directory }}'

- name: Installing Vault binary from remote source
  unarchive:
    src: '{{ vault_download }}'
    dest: '{{ vault_install_directory }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    remote_src: true
    mode: '0770'
  notify:
    - Restart Vault
  when: vault_local_binary_location is not defined

- name: Installing Vault binary from local source
  copy:
    src: '{{ vault_local_binary_location }}'
    dest: '{{ vault_install_directory }}/{{ vault_local_binary_location | basename }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0770'
  notify:
    - Restart Vault
  when: vault_local_binary_location is defined

- name: Creating TLS directory
  file:
    state: directory
    path: '{{ vault_tls_directory }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0750'
  when:
    - vault_tls_cert_file is defined
    - vault_tls_key_file is defined

- name: Copying TLS certificates
  copy:
    src: '{{ item }}'
    dest: '{{ vault_tls_directory }}/{{ item | basename }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0400'
  with_items:
    - '{{ vault_tls_ca_cert_file | default([]) }}'
    - '{{ vault_tls_cert_file }}'
    - '{{ vault_tls_key_file }}'
  when:
    - vault_tls_cert_file is defined
    - vault_tls_key_file is defined
  notify:
    - Restart Vault

- name: Creating Vault data directory
  file:
    state: directory
    path: '{{ vault_home_directory }}/data'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0750'
  when: vault_storage_backend == 'file'

- name: Creating Vault Raft directory
  file:
    state: directory
    path: '{{ vault_data_directory }}/raft'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0750'
  when: vault_storage_backend == 'integrated'

- name: Templating out Vault configuration
  template:
    src: vault.hcl.j2
    dest: '{{ vault_config_file }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0640'
  notify:
    - Restart Vault

- name: Templating out systemd script
  template:
    src: vault.systemd.j2
    dest: /etc/systemd/system/vault.service
    owner: root
    group: root
    mode: '0640'
  notify:
    - Reload Vault daemon

- name: Starting and Enabling Vault
  systemd:
    name: vault
    enabled: true
    state: started
